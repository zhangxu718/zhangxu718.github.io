{"meta":{"title":"Lil' Goldfish","subtitle":null,"description":"c++ 操作系统 数据挖掘 linux","author":"Goldfish","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"ELF文件解析器","slug":"ELF文件解析器","date":"2019-03-22T02:15:09.000Z","updated":"2019-03-22T03:15:36.139Z","comments":true,"path":"2019/03/22/ELF文件解析器/","link":"","permalink":"http://yoursite.com/2019/03/22/ELF文件解析器/","excerpt":"","text":"ELF(Executable and Linking Format), 即”可执行可连接格式”, 最初由UNIX系统实验室做为应用程序二进制值接口(Application Binary Interface - ABI)的一部分而制定和发布。 一、ELF文件的静态结构1.1 介绍具有Executable and Linking Format, 即”可执行可连接格式”, 具有这种格式的文件成为ELF文件。ELF规范中把ELF文件宽泛地称为”目标文件(object file)”,一般地, 我们把经过编译但没有连接的文件(Linux/Unix中的.o文件)成为目标文件,而ELF文件仅指连接好的可执行文件。在ELF规范中,符合ELF文件格式规范的都成为ELF文件,也称为目标文件,而经过编译但没有连接的文件则称为”可重定位文件(relocatable file)”或”待重定位文件”。本篇采取与此规范相同的命名方式。 1.2 ELF文件格式概述从连接的角度和运行的角度, 可以分别把目标文件的组成部分做一下划分: 目标文件格式 ELF文件头(ELF header)位于文件的最开始处,包含整个文件的结构信息。 节(section)是专用于连接过程而言的,在每个节中包含有指令数据、符号数据、重定位数据等。 程序头表(program header table)在运行过程中是必须的,在连接过程中是可选的,它的作用是告诉操作系统如何创建进程的镜像。 节头表(section header table)包含有文件中所有节信息,在连接视图中,节头表是必须存在的,ELF文件中每个节要在节头表中有一个对应的注册项,这个注册项描述了节的名称,大小等等。 在上图中,程序头在ELF文件头之后,节头表在节信息之后,在实际的文件中,这个顺序并不固定。 在ELF文件的各个组成部分中,只有ELF文件头的位置是固定的,其他内容的位置均可改变。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-03-22T01:35:16.070Z","updated":"2017-10-28T00:39:58.000Z","comments":true,"path":"2019/03/22/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}